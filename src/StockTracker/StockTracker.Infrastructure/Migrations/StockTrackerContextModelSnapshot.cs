// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTracker.Infrastructure.Data;

#nullable disable

namespace StockTracker.Infrastructure.Migrations
{
    [DbContext(typeof(StockTrackerContext))]
    partial class StockTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockExchangeRelationship", b =>
                {
                    b.Property<string>("StockExchangeId")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("StockId")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("StockExchangeId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("StockExchangeRelationship");
                });

            modelBuilder.Entity("StockTracker.Domain.Models.Entities.Stock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("BusinessSector")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnOrder(4);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(3);

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnOrder(6);

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("StockTracker.Domain.Models.Entities.StockExchange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(4);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnOrder(5);

                    b.Property<string>("ExchangeSymbol")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9);

                    b.HasKey("Id");

                    b.ToTable("StockExchanges", (string)null);
                });

            modelBuilder.Entity("StockTracker.Domain.Models.Entities.WebhookSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(7);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnOrder(2);

                    b.Property<string>("WebhookPublisher")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnOrder(5);

                    b.Property<int>("WebhookType")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.ToTable("WebhookSubscriptions", (string)null);
                });

            modelBuilder.Entity("StockExchangeRelationship", b =>
                {
                    b.HasOne("StockTracker.Domain.Models.Entities.StockExchange", null)
                        .WithMany()
                        .HasForeignKey("StockExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTracker.Domain.Models.Entities.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
